<snippet>
	<content><![CDATA[
  /*
    Auther: ghoshashis545 Ashis Ghosh ðŸ˜Ž
    College: Jalpaiguri Govt Enggineering College
*/
#pragma GCC optimize("Ofast")  
#pragma GCC target("avx,avx2,fma") 

#include <bits/stdc++.h>
#include<algorithm>
#include<string>
using namespace std;
#define ll int
#define int long long
#define ld long double
#define ff first
#define ss string 
#define se second
#define sp(x) cout << fixed << setprecision(x)
#define endl "\n"
#define ub upper_bound
#define lb lower_bound
#define vi vector<int>
#define ipair pair<int,int>
#define vpi vector<ipair>
#define clr(a,x) memset(a,x,sizeof(a))
#define alt(v) v.begin(),v.end()
#define ralt(v) v.rbegin(),v.rend()
#define pb emplace_back
#define mp make_pair
#define PI 3.1415926535897932384626
#define cntb(x) __builtin_popcount(x)
#define fab(i,a,b) for(int i=(a);i<(b);i++)
#define fba(i,a,b) for(int i=(b);i>=(a);i--)

bool ispoweroftwo(int n){return n&(!(n&(n-1)));}
int mod=1000000007;
// int mod=998244353;
int dx[] = {1,0,-1,0};
int dy[] = {0,-1,0,1};

bool test  = 1;

const int inf = 1e18;
const int N = 2e5+5;

int n;
void multiply(int a[][2],int b[][2]){
    int x[2][2] = {0};
    for(int i = 0; i < 2; ++i)
        for(int j = 0; j < 2; ++j)
            for(int k = 0; k < 2; ++k){
                x[i][j] += (a[i][k]*b[k][j])%mod;
                x[i][j] %= mod;
            }
    
    for(int i = 0; i < 2; ++i)
        for(int j = 0; j < 2; ++j)
            a[i][j] = x[i][j];
}

void power(int x[][2],int n){
    int res[][2] = {{1,0},{0,1}}; 
    while(n){
        if(n&1)
            multiply(res,x);
        n >>= 1;
        multiply(x,x);
    }
    for(int i = 0; i < 2; ++i)
        for(int j = 0; j < 2; ++j)
            x[i][j] = res[i][j];

}

void solve(int tc = 0)
{
    cin >> n;
    if(n==1){
        cout<<"2\n";
        return;
    }
    int x[2][2] = {{4,1},{1,2}};
    power(x,n-1);
    int res = 0;
    for(int i = 0; i < 2; i++)
        for(int j = 0; j < 2; ++j){
            res += x[i][j];
            res %= mod;
        }
    cout<<res<<"\n";
}

 

 
 
 
 
 
 
 
 
 
 
 
 
 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
signed main()
{
    ios_base::sync_with_stdio(false);cin.tie(NULL);
    #ifndef ONLINE_JUDGE
    freopen("tmp/input.txt", "r", stdin);
    freopen("tmp/output.txt", "w", stdout);
    #endif
    int t=1;
    if(test)
    cin>>t;
    for(int i = 1; i <= t; ++i){
        solve(i);
    }
    return 0;
} 
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>matrix_expo</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
