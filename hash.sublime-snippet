<snippet>
	<content><![CDATA[
const int mod = (1LL << 31)-1;
int rand(int l, int r){
  static std::mt19937 rng(std::chrono::steady_clock::now().time_since_epoch().count());
  std::uniform_int_distribution<int> ludo(l, r); return ludo(rng);
}
inline int sub(int x,int y,int mod = ::mod){x -= y;if(x < 0) x += mod;if(x > mod)x %= mod; return x;}
inline int mul(int x,int y){return (x%mod * y%mod)%mod;}
inline int add(int x,int y){return (x%mod + y%mod)%mod;} 
struct Hash {
  vector<pair<int,int>> H, pre;
  Hash(string &s, int N, int b1 = 41, int b2 = 53) :
    H(N + 5), pre(N + 5) {       
    pre[0].ff = 1, b1 = rand(37, 1 << 10);
    pre[0].se = 1, b2 = rand(41, 1 << 9);
    int cur1 = 0, cur2 = 0;
    for (int i = 1; i <= N; ++i) {
      pre[i].ff = mul(pre[i-1].ff, b1);
      pre[i].se = mul(pre[i-1].se, b2);
      cur1 = add(mul(cur1, b1), (s[i-1] - 'a' + 1));
      cur2 = add(mul(cur2, b2), (s[i-1] - 'a' + 1));
      H[i].ff = cur1, H[i].se = cur2;
    }   
  }
  pair<int,int> get_hash(int l, int r) {
    int rem1 = mul(pre[r-l+1].ff, H[l-1].ff);
    int rem2 = mul(pre[r-l+1].se, H[l-1].se);
    return {sub(H[r].ff, rem1), sub(H[r].se, rem2)};
  }
};
// Hash hs(s,n);
// hs.get_hash(l,r);


]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>hash</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
