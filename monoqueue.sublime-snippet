<snippet>
	<content><![CDATA[
class Monoqueue(collections.deque):
    def enqueue(self, val):
        count = 1
        while self and self[-1][0] < val:
            count += self.pop()[1]
        self.append([val, count])

    def dequeue(self):
        ans = self.max()
        self[0][1] -= 1
        if self[0][1] <= 0:
            self.popleft()
        return ans

    def max(self):
        return self[0][0] if self else 0


class Solution(object):
    def constrainedSubsetSum(self, A, K):
        monoq = Monoqueue()
        ans = max(A)
        for i, x in enumerate(A):
            monoq.enqueue(x + max(0, monoq.max()))
            if i >= K:
                ans = max(ans, monoq.dequeue())
        return max(ans, monoq.dequeue())

]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>monoqueue</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
