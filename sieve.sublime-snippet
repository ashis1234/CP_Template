<snippet>
	<content><![CDATA[
bool OK[N];
vector<int>primes;
vector<ipair>factors[N];
vector<int>divisors[N];
void sieve()
{
    for(int i = 2; i < N; ++i)
        OK[i] = true;
    primes.push_back(2);
    for(int i = 3; i < N; i += 2)
        if(OK[i]){
            primes.push_back(i);
            for(int j = i+i; j < N; j += i)
                OK[j] = false;
        }
}


void primeFactors(int num)
{
    int expo = 0 , n = num;   
    for (int i = 0; primes[i] <= sqrt(num); i++)
    {
        expo = 0;
        int prime = primes[i];
        while (num % prime == 0){
            expo++;
            num = num / prime;
        }
        if (expo > 0)
            factors[n].push_back(make_pair(prime, expo));
    }

    if ( num >= 2)
        factors[n].push_back(make_pair(num, 1));

}


void setDivisors(int n,int cur, int i) 
{
    for(int j = i; j < (int)factors[n].size() ; ++j){
        int cur1 = cur * factors[n][j].first;
        for(int k = 0; k < factors[n][j].second ; ++k){
            divisors[n].push_back(cur1);
            setDivisors(n,cur1,j+1);
            cur1 *= factors[n][j].first;
        }
    }
}


void precompute(){
    sieve();
    for(int i = 2; i < N; ++i){
        primeFactors(i);
        setDivisors(i,1,0);
    }
    // for(int i = 2; i < N; ++i)
    //     for(int j = 2 ; j <= sqrt(i); ++j)
    //         if(i%j == 0){
    //             divisors[i].push_back(j);
    //             if(j*j != i) divisors[i].push_back(i/j);
    //         }
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>sieve</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
